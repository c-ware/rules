include(macros.m4)

HEADER()

.SH NAME
cware - introduction to C-Ware

.SH DESCRIPTION
C-Ware is a software project that aims to produce heavily portable, and
consistent code. Part of achieving consistent code, we need to have a
consistent file layout and code style. This guide aims to provide the
ground-work for this.

.SH NAMING RULES
For starters, the file and directory layout of a C-Ware project has some
fairly strict rules that \fBmust\fR be followed.
.IP LIST_CHAR() LIST_OFFSET()
File and directory names \fBmust\fR be 8 characters or less, and the file
extension must be 3 characters or less. The only exception to this rule is
documentation, which the names and extensions of which can be any length.
.IP LIST_CHAR() LIST_OFFSET()
Any C-Ware project is \fBforbidden\fR from making use of recursive Makefiles.
They make projects harder to maintain, and remain consistent; especially in
situations where we must use older dialects of \fBmake\fR(1). Use a tool like \fBmakegen\fR(cware)
to generate single Makefiles for arbitrary dialects of \fBmake\fR(1).
.IP LIST_CHAR() LIST_OFFSET()
The maximum path length of any file (which includes the file extension), from,
and including the root project directory must be within or at 60 characters.
.IP LIST_CHAR() LIST_OFFSET()
All source files which contain a \fBmain\fR function must be called \fBmain.c\fR. If there
is a need for multiple programs in a single C-Ware project, they should be separated across
their own directories.
.IP "" 0.0i


.SH PROJECT LAYOUT
Aside from file and directory naming rules, C-Ware projects must also have a
somewhat predictable structure. All of these paths can be assumed to be tacked
on to the name of the project that is being written. It should also be noted
that all of these directories are \fIrequired\fR unless stated otherwise.

\fBsrc/\fR
.RS SHIFT_OFFSET()
The source code directory. Other than the name of the directory being \fIsrc\fR,
there are no rules on how this directory's contents should be structured.
.RE

\fBtests/\fR
.RS SHIFT_OFFSET()
The tests directory. This directory will contain files which test different
components of the library, or software. All C-Ware projects must have tests.
.RE

\fBtests/assets/\fR
.RS SHIFT_OFFSET()
The assets directory. This directory will contain \fBstatic\fR files which are used
by some, or all of the tests. These assets should be considered \fBread-only\fR
by the test writers, and as such should not be modified by the tests.
.RE

\fBtests/temp/\fR
.RS SHIFT_OFFSET()
The temporary diirectory. This is a directory that will be cleared before \fBand\fR
after tests are executed, and can be considered temporary storage. All files in
this directory should be considered vulnerable to a lack of thread safety, so
make sure there are no conflicts between tests that use this directory.
.RE

\fBtests/common.h\fR
.RS SHIFT_OFFSET()
The common file that all tests will include. This contains data that all tests
will need to run, or that tests in the future may use.
.RE

\fBdoc/\fR
.RS SHIFT_OFFSET()
The documentation directory. This should contain documentation for the program
or library is generated with \fBdocgen\fR(cware), or ones that are hand written;
although \fBdocgen\fR(cware) is recommended. Documentation should at least consist
of UNIX manual pages.
.RE

\fBscripts\fR
.RS SHIFT_OFFSET()
The scripts directory. This directory will contain scripts that perform various
operations on the project as a whole, or do basic maintenance like running tests,
loading new documentation, and creating Makefiles. There is no strict rules on
what this directory should contain specifically, however. The scripts should not
have to be ran by the end user, and UNIX shell scripts are preferred.
.RE

.SH PORTABILITY
At a minimum, C-Ware projects must be ANSI C89-compliant code. Any OS-specific 
functionality should be guarded by #ifdef statements to ensure that the correct
approach for one OS does not overlap with another OS. Ideally, C-Ware projects
would support any system that is POSIX.1 compliant. This includes UNIX, DOS,
Windows, OS X (UNIX), Linux (UNIX), OpenVMS, and OS/2. Of course, not many of 
these are still in active use, but supporting old platforms also nets you support
for embedded systems (with greatly-reduced C runtime libraries).


.SH LICENSING
Next, licensing. The C-Ware project uses its own modification of the 2-Clause
BSD license for its projects. The purpose of the license is to preserve fork
history for the purpose of archival. Each \fBsource\fR file in C-Ware (meaning
any file used in compilation in the \fBsrc\fR directory) must have this license
at the top of each file, and each project must have a LICENSE file with this
license inside of it (except for the comment syntax). The license is as follows,
with the C comment for easy insertion.

/*
 * C-Ware License
 * 
 * Copyright (c) 2022, C-Ware
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Redistributions of modified source code must append a copyright notice in
 *    the form of 'Copyright <YEAR> <NAME>' to each modified source file's
 *    copyright notice, and the standalone license file if one exists.
 *
 * A "redistribution" can be constituted as any version of the source code
 * that is intended to comprise some other derivative work of this code. A
 * fork created for the purpose of contributing to any version of the source
 * does not constitute a truly "derivative work" and does not require listing.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.br
*/

.SH SAFETY
Being a C project, security vulnerabilities will be easier to create. To try and
limit the number of security vulnerabilities, and make debugging easier, there are
extremely strict rules for C-Ware projects that \fBmust\fR be followed. While these
may limit the speed of the program, once we are confident in the safety of the
program, the safety checks can always be turned off. Source code audits for security
are highly advised, as memory leaks are only one part of secure software development.
C-Ware projects should be designed with security in mind, not security as an afterthought.

.IP LIST_CHAR() LIST_OFFSET()
Every function, public and private, must perform checks with the \fBliberror\fR(cware)
library for every pointer that is accessed to make sure it is not NULL. Repeated
accesses do not warrant repeated checks. The pointer should only be checked for
NULL if is reassigned to by some other part of the program, whether that be in the
same scope of the variable, or another function.

.IP LIST_CHAR() LIST_OFFSET()
All variables \fBmust\fR be initialized before they are used. Stack arrays should
have their entire contents initialized. The initialization should take place with
the \fBLIBERROR_INIT\fR(cware) macro, and will initialize it with all zeros.

.IP LIST_CHAR() LIST_OFFSET()
Any form of indexing of an array must be bounds checked before the index can take place.
Integration with libraries like \fBcarray\fR(cware) exist inside of \fBliberror\fR(cware),
as well as macros for raw C arrays. Other than that, this rule is rather self explanatory.

.IP LIST_CHAR() LIST_OFFSET()
Under no circumstances should a variadic argument have a sentinel that is a NULL pointer.
Variadic arguments should have their length known through the first parameter, meaning
that the number of variadic arguments must be the last positional argument. For example,

int sum_integers(int number_of_integers, ...);

This is because it makes the C compiler explicitly enforce the need for the programmer
to tell the function how many variadc arguments to expect, as opposed to potentially
forgetting to add NULL at the end.

.IP LIST_CHAR() LIST_OFFSET()
The return values of any function which can return a value that indicates success or
failure \fBmust\fR be handled. The \fBliberror\fR(cware) library has macros for handling
more generic problems, and some for fairly specific situations like malloc failure and
file opening failures.

.IP LIST_CHAR() LIST_OFFSET()
Many of the security vulnerabilities often found in C code are buffer overruns/overflows,
so a lot of attention must be given to preventing these, or letting the programmer know
when they are vulnerable to them.  Stack strings must always be declared with an additional
two bytes at the end of them.  One for the NUL byte, and one for determining if the buffer
was written past its expected size, which is useful for diagnostics. For example.

#define ARRAY_LENGHTH   6 + 1   /* +1 for the overflow detection */
.br
char arr[ARRAY_LENGHTH + 1];    /* +1 for the NUL byte if a NUL-byte writing function
                                   like strncat is given ARRAY_LENGTH as the max, as
                                   it will write the NUL byte at the (ARRAY_LENGTH + 1)'th
                                   byte. This one is just a safety measure, of course. */

As a practical example, if we perform an \fBfread\fR(3) from \fBstdin\fR(3), we will allow
7 bytes to be read, but if the 7th byte is read (or, following the previous rule,
arr[ARRAY_LENGTH - 1] is not NUL, since it should be initialized as 0 before use), then
we can produce an error message for the user.

.IP LIST_CHAR() LIST_OFFSET()
Algorithmic-complexity attacks should not be overlooked. These attacks will cause even the
most efficent programs to grind to a halt, violating the availability principle of good
system security. Watch out for "low-hanging fruit" complexity attacks, such as tarpitted
hashtables.


.IP "" 0.0i

Programmers make mistakes. That is an inevitability of writing code. That being said, it
is really not that difficult to perform audits to make sure even these most basic of
security checks are performed. It can be as simple as grepping all source files for 
an opening left bracket, and checking if a bounds check is done, or as aggressive as a
fuzzing. In the end, if speed is a concern, at least we can turn off the safety checks
once we are confident, right? 

.SH OS Detection
Some operating systems do not have any helpful OS detection mechanism through compiler
macros, and so for all C-Ware projects, if it supports one of the following operating
systems, please use the corresponding macro to detect if its being compiled on that
operating system.

.TS
tab(;);
l l l
_ _ _
l l l
.
Operating System;Macro
UNIXWare;__UNIXWARE__
QuasijarusBSD;__QuasiBSD__
.TE
