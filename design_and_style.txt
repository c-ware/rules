C-Ware Design, Style, Testing, and Other Considerations

1. Structure Bookkeeping
A common piece of book keeping that is very easy to overlook is forgetting
to update structure initialization and validation operations when adding new
fields to a structure. This can lead to safety checks not being correctly
performed, and or reading from initialized memory which may cause unpredictable
behavior.

As per C-Ware guidelines, each structure is required to have a corresponding
initialization and validation operation associated with it. Thus, for each
structure, we must verify that all their fields are initialized, and are
checked for safety. Some operations which use the structure may need to also
be updated due to selective safety checks, forcing them to manually perform the
safety checks.

For the cases where this appears, grep for the name of each safety check macro.
The places where this happens must be labeled as per C-Ware guidelines, along
with signifying which checks it does NOT perform.

2. Addition & Subtraction
The addition and subtraction operations can lead to easy off-by-one errors.
Because of this, all operations which involve these two operators must be
validated to make sure they evaluate to the expected value.

3. Function Bookkeeping
Similar to structures, functions may change over time. When and if they do
change, however, it is important to make sure that all arguments and structure
fields that the function accesses are validated to make sure they are correct
before they are read or written to.

This also applies to testing. When a function a modifies a new field, it must be
verified that the modified states are as expected using tests. When a new test
branch is added, we must verify that each possible scenario that the function
explicitly accounts for with an if statement is tested. When a new branch is 
added in the function, we must verify that the branch executes correctly.

3. Function Bookkeeping
Similar to structures, functions may change over time. When and if they do
change, however, it is important to make sure that all arguments and structure
fields that the function accesses are validated to make sure they are correct
before they are read or written to.

This also applies to testing. When a function a modifies a new field, it must be
verified that the modified states are as expected using tests. When a new test
branch is added, we must verify that each possible scenario that the function
explicitly accounts for with an if statement is tested. When a new branch is 
added in the function, we must verify that the branch executes correctly.

5. Code Auditing

At regular intervals, all C-Ware projects will be subjected to forced code 
audits. This will consist of:
- static analysis
- black-box testing
- white-box testing
- fuzz testing

The static analysis follows a traditional C source code analysis technique, 
where the source is manually checked for things that would cause bugs by good 
C programmers. This should weed out most issues.

The black-bot test involves attempts to find bad input to functions and 
programs that would result in a defeated security state or functionality state.

The white-box test involves almost the same plan of attack as a black-box 
test, but, the testers will have access to the source code. This results in 
the program under test needing to have excellent error-checking capability 
(and, possibly error-correcting capability) in order to overcome test failure 
at the hands of specially-crafted bad input. A good program should never ever 
fail a white-box test.

Fuzz testing, which is really a subtype of black-box testing, involves entering 
random input into a program's input boxes to verify everything from error 
checking to input validation. If any program crashes at the hands of fuzzing, 
it can safely be assumed that it will fail at a black-box test, and possibly 
a white-box test. 

Testing like this is a vital component of C-Ware's assurance to safe C code; 
after all, there is no reason to crash when the operator bangs their head on 
the keyboard and generates possibly invalid input!


